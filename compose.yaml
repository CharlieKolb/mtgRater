# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  proxy:
    image: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
      - 443:443
    networks:
      - client-side
      - server-side
    depends_on:
      - server
      - frontend

  frontend:
    image: charliekolb/private_repository:mtgRaterFrontend
    build:
      context: frontend
      target: development
    networks:
      - client-side
    ports:
      - 3000:3000
    volumes:
      - ./frontend/src:/code/src:ro

  server:
    image: charliekolb/private_repository:mtgRaterBackend
    build:
      context: backend
      target: final
    networks:
      - client-side
      - server-side
    volumes:
      - ./backend/src:/code/src
      - backend-cache:/code/target
    environment:
      - PG_DBNAME=postgres
      - PG_HOST=db
      - PG_USER=postgres
      - PG_PASSWORD=insecure
      - ADDRESS=0.0.0.0:8000
      - RUST_LOG=debug
      - DATABASE_URL=postgres://postgres:insecure@db:5432/postgres
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      # - ./db/queries/migrations/0001_ratings_up.sql:/docker-entrypoint-initdb.d/0001_ratings_up.sql
      # - ./db/queries/migrations/0002_cards_up.sql:/docker-entrypoint-initdb.d/0002_cards_up.sql
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOSTNAME=db
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    ports:
      - 5432
    networks:
      - server-side
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

secrets:
  db-password:
    file: backend/db/password.txt

networks:
  client-side: {}
  server-side: {}

volumes:
  backend-cache: {}
  db-data: {}
